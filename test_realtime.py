#!/usr/bin/env python3
"""
Real-time Audio Denoising - Buffered Streaming
Smooth continuous output with acceptable latency
"""

import sounddevice as sd
import torch
import numpy as np
import time
from scipy import signal
import warnings
import os
from collections import deque
import threading
import queue

os.environ['PYTHONWARNINGS'] = 'ignore'
warnings.filterwarnings('ignore')

# ========== Configuration ==========
HARDWARE_SR = 48000
MODEL_SR = 16000
CHUNK = 16000  # 333ms @ 48kHz (Ï≤òÎ¶¨ Îã®ÏúÑ)
INPUT_DEVICE = 1
OUTPUT_DEVICE = 1
MODEL_PATH = '/home/test1/denoiser/models/best.th'

# Î≤ÑÌçº ÏÑ§Ï†ï
BUFFER_SIZE = 96000  # 2Ï¥à Î≤ÑÌçº (Î∂ÄÎìúÎü¨Ïö¥ Ï∂úÎ†•)
output_buffer = deque(maxlen=BUFFER_SIZE)
buffer_lock = threading.Lock()

# Ï≤òÎ¶¨ ÌÅê
process_queue = queue.Queue(maxsize=10)

# ========== Model Loading ==========
print("Loading model...")
checkpoint = torch.load(MODEL_PATH, map_location='cpu', weights_only=False)
model = checkpoint['class'](*checkpoint['args'], **checkpoint['kwargs'])
model.load_state_dict(checkpoint['state'])
model.eval()

print("Compiling model...")
dummy_input = torch.randn(1, 1, CHUNK // 3)
with warnings.catch_warnings():
    warnings.simplefilter("ignore")
    model = torch.jit.trace(model, dummy_input)

print(f"‚úÖ Model ready\n")

# ========== Stats ==========
chunk_count = 0
rtf_list = []
start_time = time.time()
processing = True

# ========== Processing Thread ==========
def processing_thread():
    """Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú Ïò§ÎîîÏò§ Ï≤òÎ¶¨"""
    global chunk_count
    
    while processing:
        try:
            audio_data = process_queue.get(timeout=0.1)
            
            t0 = time.time()
            
            # Downsample: 48k ‚Üí 16k
            audio_16k = signal.resample_poly(audio_data, 1, 3)
            
            # Model inference
            x = torch.from_numpy(audio_16k).float().unsqueeze(0).unsqueeze(0)
            with torch.no_grad():
                y = model(x)
            
            # Upsample: 16k ‚Üí 48k
            denoised = signal.resample_poly(y.squeeze().cpu().numpy(), 3, 1)
            
            # Î≤ÑÌçºÏóê Ï∂îÍ∞Ä
            with buffer_lock:
                for sample in denoised:
                    if len(output_buffer) < BUFFER_SIZE:
                        output_buffer.append(sample)
            
            # Stats
            process_time = time.time() - t0
            rtf = process_time / (len(audio_16k) / MODEL_SR)
            rtf_list.append(rtf)
            chunk_count += 1
            
            if chunk_count % 30 == 0:
                elapsed = time.time() - start_time
                avg_rtf = np.mean(rtf_list[-30:])
                buffer_ms = len(output_buffer) / HARDWARE_SR * 1000
                print(f"[{elapsed:5.1f}s] Chunks: {chunk_count:3d} | RTF: {avg_rtf:.3f} | Buffer: {buffer_ms:.0f}ms")
            
        except queue.Empty:
            continue
        except Exception as e:
            print(f"‚ùå Processing error: {e}")

# ========== Input Callback ==========
def input_callback(indata, frames, time_info, status):
    """ÎßàÏù¥ÌÅ¨ ÏûÖÎ†• ‚Üí Ï≤òÎ¶¨ ÌÅêÏóê Ï∂îÍ∞Ä"""
    if status:
        print(f"‚ö†Ô∏è  Input: {status}")
    
    try:
        # ÎÖºÎ∏îÎ°úÌÇπÏúºÎ°ú ÌÅêÏóê Ï∂îÍ∞Ä
        audio_data = indata[:, 0].copy()
        process_queue.put_nowait(audio_data)
    except queue.Full:
        pass  # ÌÅêÍ∞Ä Í∞ÄÎìù Ï∞®Î©¥ Ïä§ÌÇµ

# ========== Output Callback ==========
def output_callback(outdata, frames, time_info, status):
    """Î≤ÑÌçºÏóêÏÑú Í∫ºÎÇ¥ÏÑú Ïä§ÌîºÏª§Î°ú Ï∂úÎ†•"""
    if status:
        print(f"‚ö†Ô∏è  Output: {status}")
    
    with buffer_lock:
        for i in range(frames):
            if output_buffer:
                outdata[i, 0] = output_buffer.popleft()
            else:
                outdata[i, 0] = 0  # Î≤ÑÌçº ÎπÑÏóàÏúºÎ©¥ Î¨¥Ïùå

# ========== Main ==========
def main():
    global processing
    
    print("=" * 60)
    print(f"üé§ Input: Device {INPUT_DEVICE}")
    print(f"üîä Output: Device {OUTPUT_DEVICE}")
    print(f"üì¶ Processing chunk: {CHUNK/HARDWARE_SR*1000:.0f}ms")
    print(f"üîÑ Output buffer: {BUFFER_SIZE/HARDWARE_SR*1000:.0f}ms")
    print(f"‚è±Ô∏è  Initial latency: ~2 seconds (buffer fill)")
    print("=" * 60)
    print("\nüöÄ Starting buffered streaming...")
    print("   üé§ Speak continuously - output will be smooth!")
    print("   ‚è≥ Wait 2-3 seconds for buffer to fill...")
    print("   Press Ctrl+C to stop\n")

    # Ï≤òÎ¶¨ Ïä§Î†àÎìú ÏãúÏûë
    proc_thread = threading.Thread(target=processing_thread, daemon=True)
    proc_thread.start()

    try:
        # ÏûÖÎ†• Ïä§Ìä∏Î¶º
        input_stream = sd.InputStream(
            samplerate=HARDWARE_SR,
            blocksize=CHUNK,
            device=INPUT_DEVICE,
            channels=1,
            dtype=np.float32,
            callback=input_callback
        )
        
        # Ï∂úÎ†• Ïä§Ìä∏Î¶º
        output_stream = sd.OutputStream(
            samplerate=HARDWARE_SR,
            blocksize=1024,  # ÏûëÏùÄ Ï≤≠ÌÅ¨Î°ú Î∂ÄÎìúÎü¨Ïö¥ Ï∂úÎ†•
            device=OUTPUT_DEVICE,
            channels=1,
            dtype=np.float32,
            callback=output_callback
        )
        
        with input_stream, output_stream:
            while True:
                sd.sleep(1000)
            
    except KeyboardInterrupt:
        print("\n\nüõë Stopping...")
        processing = False
    except Exception as e:
        print(f"\n‚ùå Error: {e}")
        processing = False

    # Final stats
    print(f"\n{'='*60}")
    print(f"üìä Final Stats:")
    print(f"   Chunks processed: {chunk_count}")
    print(f"   Runtime: {time.time() - start_time:.1f}s")
    
    if len(rtf_list) > 5:
        stable_rtf = rtf_list[5:]
        print(f"   Avg RTF: {np.mean(stable_rtf):.3f}")
        print(f"   Max RTF: {np.max(stable_rtf):.3f}")
    
    print(f"{'='*60}\n")

if __name__ == "__main__":
    main()